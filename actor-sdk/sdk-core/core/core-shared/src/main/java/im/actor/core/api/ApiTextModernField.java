package im.actor.core.api;
/*
 *  Generated by the Actor API Scheme generator.  DO NOT EDIT!
 */

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.io.IOException;

import im.actor.runtime.bser.BserObject;
import im.actor.runtime.bser.BserValues;
import im.actor.runtime.bser.BserWriter;
import im.actor.runtime.collections.SparseArray;

public class ApiTextModernField extends BserObject {

    private String title;
    private String value;
    private Boolean isShort;

    public ApiTextModernField(@NotNull String title, @NotNull String value, @Nullable Boolean isShort) {
        this.title = title;
        this.value = value;
        this.isShort = isShort;
    }

    public ApiTextModernField() {

    }

    @NotNull
    public String getTitle() {
        return this.title;
    }

    @NotNull
    public String getValue() {
        return this.value;
    }

    @Nullable
    public Boolean isShort() {
        return this.isShort;
    }

    @Override
    public void parse(BserValues values) throws IOException {
        this.title = values.getString(1);
        this.value = values.getString(2);
        this.isShort = values.optBool(3);
        if (values.hasRemaining()) {
            setUnmappedObjects(values.buildRemaining());
        }
    }

    @Override
    public void serialize(BserWriter writer) throws IOException {
        if (this.title == null) {
            throw new IOException();
        }
        writer.writeString(1, this.title);
        if (this.value == null) {
            throw new IOException();
        }
        writer.writeString(2, this.value);
        if (this.isShort != null) {
            writer.writeBool(3, this.isShort);
        }
        if (this.getUnmappedObjects() != null) {
            SparseArray<Object> unmapped = this.getUnmappedObjects();
            for (int i = 0; i < unmapped.size(); i++) {
                int key = unmapped.keyAt(i);
                writer.writeUnmapped(key, unmapped.get(key));
            }
        }
    }

    @Override
    public String toString() {
        String res = "struct TextModernField{";
        res += "title=" + this.title;
        res += ", value=" + this.value;
        res += ", isShort=" + this.isShort;
        res += "}";
        return res;
    }

}
