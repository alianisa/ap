package im.actor.core.api;
/*
 *  Generated by the Actor API Scheme generator.  DO NOT EDIT!
 */

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.io.IOException;

import im.actor.runtime.bser.BserValues;
import im.actor.runtime.bser.BserWriter;
import im.actor.runtime.collections.SparseArray;

public class ApiUntypedEvent extends ApiEvent {

    private String eventType;
    private ApiRawValue params;

    public ApiUntypedEvent(@NotNull String eventType, @Nullable ApiRawValue params) {
        this.eventType = eventType;
        this.params = params;
    }

    public ApiUntypedEvent() {

    }

    public int getHeader() {
        return 1;
    }

    @NotNull
    public String getEventType() {
        return this.eventType;
    }

    @Nullable
    public ApiRawValue getParams() {
        return this.params;
    }

    @Override
    public void parse(BserValues values) throws IOException {
        this.eventType = values.getString(1);
        if (values.optBytes(2) != null) {
            this.params = ApiRawValue.fromBytes(values.getBytes(2));
        }
        if (values.hasRemaining()) {
            setUnmappedObjects(values.buildRemaining());
        }
    }

    @Override
    public void serialize(BserWriter writer) throws IOException {
        if (this.eventType == null) {
            throw new IOException();
        }
        writer.writeString(1, this.eventType);
        if (this.params != null) {
            writer.writeBytes(2, this.params.buildContainer());
        }
        if (this.getUnmappedObjects() != null) {
            SparseArray<Object> unmapped = this.getUnmappedObjects();
            for (int i = 0; i < unmapped.size(); i++) {
                int key = unmapped.keyAt(i);
                writer.writeUnmapped(key, unmapped.get(key));
            }
        }
    }

    @Override
    public String toString() {
        String res = "struct UntypedEvent{";
        res += "eventType=" + this.eventType;
        res += ", params=" + this.params;
        res += "}";
        return res;
    }

}
