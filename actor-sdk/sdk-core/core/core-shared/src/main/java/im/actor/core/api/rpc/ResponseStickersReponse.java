package im.actor.core.api.rpc;
/*
 *  Generated by the Actor API Scheme generator.  DO NOT EDIT!
 */

import org.jetbrains.annotations.NotNull;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import im.actor.core.api.ApiStickerCollection;
import im.actor.core.network.parser.Response;
import im.actor.runtime.bser.Bser;
import im.actor.runtime.bser.BserValues;
import im.actor.runtime.bser.BserWriter;

import static im.actor.runtime.bser.Utils.byteArrayToString;

public class ResponseStickersReponse extends Response {

    public static final int HEADER = 0xf0;

    public static ResponseStickersReponse fromBytes(byte[] data) throws IOException {
        return Bser.parse(new ResponseStickersReponse(), data);
    }

    private List<ApiStickerCollection> collections;
    private int seq;
    private byte[] state;

    public ResponseStickersReponse(@NotNull List<ApiStickerCollection> collections, int seq, @NotNull byte[] state) {
        this.collections = collections;
        this.seq = seq;
        this.state = state;
    }

    public ResponseStickersReponse() {

    }

    @NotNull
    public List<ApiStickerCollection> getCollections() {
        return this.collections;
    }

    public int getSeq() {
        return this.seq;
    }

    @NotNull
    public byte[] getState() {
        return this.state;
    }

    @Override
    public void parse(BserValues values) throws IOException {
        List<ApiStickerCollection> _collections = new ArrayList<ApiStickerCollection>();
        for (int i = 0; i < values.getRepeatedCount(1); i++) {
            _collections.add(new ApiStickerCollection());
        }
        this.collections = values.getRepeatedObj(1, _collections);
        this.seq = values.getInt(2);
        this.state = values.getBytes(3);
    }

    @Override
    public void serialize(BserWriter writer) throws IOException {
        writer.writeRepeatedObj(1, this.collections);
        writer.writeInt(2, this.seq);
        if (this.state == null) {
            throw new IOException();
        }
        writer.writeBytes(3, this.state);
    }

    @Override
    public String toString() {
        String res = "response StickersReponse{";
        res += "collections=" + this.collections;
        res += ", seq=" + this.seq;
        res += ", state=" + byteArrayToString(this.state);
        res += "}";
        return res;
    }

    @Override
    public int getHeaderKey() {
        return HEADER;
    }
}
